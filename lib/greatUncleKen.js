/*

  켄 삼촌이 조카 두 명에게 용돈을 나누어주려고 합니다.
  두 명에게 나누어주는 용돈의 차이가 크면 조카들이 다툴 수 있으므로,
  가능한 두 명이 받는 용돈의 차이를 최소로 하고 싶습니다.
  켄 삼촌이 가지고 있는 화폐 단위와 보유 수량을 담은 2차원 배열 money가 매개변수로 주어집니다.
  켄 삼촌이 가지고 있는 모든 돈을 조카 두 명에게 최대한 공평하게 나누어 줄 때,
  둘이 받는 용돈 차이의 절대값을 return 하도록 함수를 완성해주세요.

  < 제한사항 >
  - money의 길이는 1이상 100 이하입니다.
  - money의 원소는 [화폐 단위, 보유 수량] 형식입니다.
  - 화폐 단위는 1 이상 10,000 이하인 정수입니다.
  - 보유 수량은 1 이상 10 이하인 정수입니다.
  - 같은 화폐 단위가 중복해서 담겨있지 않습니다.

  < 입출력 예 #1 >
  money: [[100, 3], [200, 1], [50, 2]]
  result: 0

  첫째 조카에게 100원 짜리 3개를 주고,
  둘째 조카에게 200원짜리 1개와 50원짜리 2개를 주면,
  둘 다 300원씩 가지게 됩니다.
  이 때 차이의 절대값은 0이며, 이것이 가장 공평하게 용돈을 나누어주는 방법입니다.

  < 입출력 예 #2 >
  money: [[2500, 3], [700, 5]]
  result: 400

  첫째 조카에게 2500원짜리 2개와 700원짜리 1개를 주면, 총 5700원입니다.
  둘째 조카에게 2500짜리 1개와 700원짜리 4개를 주면, 총 5300원입니다.
  이 때 차이의 절대값은 400이며, 이것이 가장 공평하게 용돈을 나누어주는 방법입니다.

 */

export default function greatUncleKen(money) {
  let firstChild = 0;
  let secondChild = 0;

  money.sort((a, b) => b[0] - a[0]);

  money.forEach(([unit, count]) => {
    for (let i = 0; i < count; i++) {
      if (firstChild <= secondChild) {
        firstChild += unit;
      } else {
        secondChild += unit;
      }
    }
  });

  return Math.abs(firstChild - secondChild);
}
