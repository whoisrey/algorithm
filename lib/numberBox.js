/*

  1 ~ 9 사이의 숫자 하나가 적힌 상자 n개가 있습니다.
  이 상자들을 <1>번 혹은 <2>번 위치에 하나씩 쌓습니다.
  n개의 상자를 모두 쌓은 후, 아래 규칙에 따라 각 층에서 수를 구하여 모두 더합니다.

  1. 같은 층의 <1>번 위치 또는 <2>번 위치에 상자가 하나만 있을 경우, 상자에 적힌 숫자를 그대로 사용하여 더합니다.
    - 같은 층의 <1>번 위치에만 상자가 있거나, <2>번 위치에만 상자가 있는 경우를 뜻합니다.
  2. 같은 층의 <1>번 위치와 <2>번 위치에 상자가 모두 있을 경우, <1>번 위치 상자의 수와 <2>번 위치 상자의 수를 순서대로 이어 붙인 수를 더합니다.
    - 예를 들어 같은 층의 <1>번 위치 상자에는 2가, <2>번 위치 상자에는 3이 적혀있다면 23을 더해야 합니다.

  예를 들어, 각 상자에 적힌 수가 [4, 2, 1, 3]일 때, 아래처럼 상자를 쌓을 수 있습니다.

  [4]  [2]
  [3]  [1]
  --------
  <1>  <2>

  위 규칙에 따라 1층에서는 31, 2층에서는 42를 구하여 더하면 73을 만들 수 있습니다. 다른 방법으로도 상자를 쌓을 수 있지만 숫자의 합이 73보다 커지게 쌓을 수는 없습니다.

  각 상자에 적힌 숫자를 나타내는 1차원 정수 배열 arr이 매개변수로 주어집니다. 이때, arr의 상자를 모두 쌓은 후 규칙대로 각 층의 수를 구하여 더했을 때 나올 수 있는 최댓값을 return 하도록 solution 함수를 완성해주세요.

  * 주의: 배열 순서대로 상자를 쌓지 않아도 됩니다. *

  < 제한사항 >

  - 1 ≤ arr의 길이 ≤ 100,000
  - 1 ≤ arr의 원소 ≤ 9

  < 입출력 예 #1 >
  
  arr: [9, 6, 1]
  result: 97

       [6]
  [9]  [1]
  --------
  <1>  <2>

  91 + 6 = 97이고 이보다 더 큰 합을 만들 수 없습니다. 따라서 97을 return 합니다.
  6이 적힌 박스를 9위에 쌓거나 1이 적힌 박스와 위치를 바꿔도 합은 97이 됩니다.

  < 입출력 예 #2 >
  
  arr: [2, 2, 2]
  result: 24

  아래 2가지 방법으로 상자를 쌓으면 22 + 2 = 24를 만들 수 있습니다.

       [2]
  [2]  [2]
  --------
  <1>  <2>

  [2]
  [2]  [2]
  --------
  <1>  <2>

  24보다 더 큰 합을 만들 수 없습니다. 따라서 24를 return 합니다.

  < 입출력 예 #3 >
  
  arr: [9, 1, 1, 1, 1, 9, 9, 1]
  result: 284

  아래 방법으로 상자를 쌓으면 91 + 91 + 91 + 11 = 284를 만들 수 있습니다.

  [1]  [1]
  [9]  [1]
  [9]  [1]
  [9]  [1]
  --------
  <1>  <2>

  284보다 더 큰 합을 만들 수 없습니다. 따라서 284를 return 합니다.

 */

export default function calculateNumberBox(arr) {
  const sortedArr = arr.sort((a, b) => b - a);
  const floor = Math.ceil(arr.length / 2);
  const boxes = [];

  for (let i = 0; i < floor; i++) {
    boxes.push(sortedArr.shift());
  }

  for (let i = 0; i < floor; i++) {
    if (!sortedArr[i]) {
      sortedArr[i] = "";
    }

    boxes[i] = Number(String(boxes[i]) + String(sortedArr[i]));
  }

  return boxes.reduce((total, number) => total + number);
}
